export const dynamic = "force-dynamic";

export const fetchCache = "force-no-store";

import { User } from "@/consts";
import { exportWorklogsToSheet, formatMessage } from "@/services";
import { saveToTurso } from "@/services/db";
import { checkAndSaveToRedis } from "@/services/redis";
import { apiThrottler } from "@grammyjs/transformer-throttler";
import {
  Bot,
  Context,
  InlineKeyboard,
  Keyboard,
  session,
  webhookCallback,
} from "grammy";
import moment from "moment";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho session
interface SessionData {
  waitingForDate: boolean;
}

// T·∫°o type cho context v·ªõi session
type MyContext = Context & {
  session: SessionData;
};

const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token)
  throw new Error("TELEGRAM_BOT_TOKEN environment variable not found.");

const bot = new Bot<MyContext>(token);

bot.api.config.use(apiThrottler());

bot.command("status", (ctx) => {
  // Ignore the message if it's older than 2 seconds
  if (Date.now() / 1000 - ctx.msg.date < 2) {
    ctx.reply("The bot is up.");
  }
});

// Thi·∫øt l·∫≠p session middleware
bot.use(
  session({
    initial: (): SessionData => ({
      waitingForDate: false,
    }),
  })
);

// 1. Commands v·ªõi m√¥ t·∫£
bot.api.setMyCommands([
  { command: "start", description: "ƒêƒÉng k√≠ th√¥ng tin" },
  { command: "report", description: "Xem Logwork ng√†y hi·ªán t·∫°i" },
  { command: "viewlogwork", description: "Xem Logwork" },
  { command: "help", description: "Xem h∆∞·ªõng d·∫´n" },
  { command: "menu", description: "C√°c ti·ªán √≠ch kh√°c" },
]);

// 2. Reply Keyboard (thay th·∫ø b√†n ph√≠m ng∆∞·ªùi d√πng)
bot.command("start", async (ctx) => {
  const user = ctx.from;
  // Ki·ªÉm tra v√† l·∫•y username ho·∫∑c t√™n ƒë·∫ßy ƒë·ªß
  if (!user?.username) {
    await ctx.reply("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng.");
    return;
  }

  const userKey = user.username as keyof typeof User;

  const userJira = User[userKey];

  if (!userJira) {
    await ctx.reply(
      `Th√¥ng tin ng∆∞·ªùi d√πng: ${user.username} ch∆∞a ƒë∆∞·ª£c khai b√°o`
    );
    return;
  }

  // Ki·ªÉm tra v√† l∆∞u v√†o Redis tr∆∞·ªõc
  const existsInRedis = await checkAndSaveToRedis(user.id, user.username);

  // N·∫øu ch∆∞a t·ªìn t·∫°i trong Redis, l∆∞u v√†o Turso
  if (!existsInRedis) {
    await saveToTurso(user.id, user.username);
    await ctx.reply("ƒêƒÉng k√Ω th√¥ng tin th√†nh c√¥ng!");
  } else {
    await ctx.reply("Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!");
  }
});

bot.command("report", async (ctx) => {
  const username = ctx.from?.username;
  // Ki·ªÉm tra v√† l·∫•y username ho·∫∑c t√™n ƒë·∫ßy ƒë·ªß
  if (!username) {
    await ctx.reply("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng.");
    return;
  }

  const userKey = username as keyof typeof User;

  const userJira = User[userKey];

  if (!userJira) {
    await ctx.reply(`Th√¥ng tin ng∆∞·ªùi d√πng: ${username} ch∆∞a ƒë∆∞·ª£c khai b√°o`);
    return;
  }

  const data = await exportWorklogsToSheet(
    userJira,
    0,
    moment().format("YYYY-MM-DD")
  );

  if (!data) {
    await ctx.reply("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ b√°o c√°o.");
    return;
  }

  const result = formatMessage(data ?? []);
  await ctx.reply(result, {
    parse_mode: "MarkdownV2",
  });
});

bot.command("menu", async (ctx) => {
  const keyboard = new Keyboard()
    .text("üçï Pizza")
    .text("üçú M√¨")
    .row()
    .text("üç£ Sushi")
    .text("üçî Hamburger")
    .row()
    .text("‚ùå ƒê√≥ng menu")
    .resized(); // L√†m cho n√∫t v·ª´a v·ªõi text

  await ctx.reply("Ch·ªçn m√≥n ƒÉn:", {
    reply_markup: keyboard,
  });
});

bot.command("help", async (ctx) => {
  // Trong MarkdownV2, c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát c·∫ßn ƒë∆∞·ª£c escape:
  // _ * [ ] ( ) ~ ` > # + - = | { } . !
  const helpMessage = `
*H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot*

*1\\. C√°c l·ªánh c∆° b·∫£n:*
‚Ä¢ /start \\- Kh·ªüi ƒë·ªông bot
‚Ä¢ /menu \\- Xem menu ch√≠nh
‚Ä¢ /book \\- ƒê·∫∑t l·ªãch h·∫πn
‚Ä¢ /help \\- Xem h∆∞·ªõng d·∫´n n√†y

*2\\. C√°ch s·ª≠ d·ª•ng:*
‚Ä¢ Nh·∫•n v√†o c√°c n√∫t ƒë·ªÉ t∆∞∆°ng t√°c
‚Ä¢ G·ª≠i tin nh·∫Øn ƒë·ªÉ chat v·ªõi bot
‚Ä¢ S·ª≠ d·ª•ng menu ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng

*3\\. ƒê·ªãnh d·∫°ng vƒÉn b·∫£n:*
‚Ä¢ _In nghi√™ng_ \\- Quan tr·ªçng
‚Ä¢ *In ƒë·∫≠m* \\- R·∫•t quan tr·ªçng
‚Ä¢ ||VƒÉn b·∫£n ·∫©n|| \\- B√≠ m·∫≠t
‚Ä¢ \`Code\` \\- M√£ l·ªánh

_Li√™n h·ªá nh√† ph√°t tri·ªÉn: @longledang_`;

  await ctx.reply(helpMessage, {
    parse_mode: "MarkdownV2",
  });
});

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t tr√™n reply keyboard
bot.hears("‚ùå ƒê√≥ng menu", async (ctx) => {
  await ctx.reply("ƒê√£ ƒë√≥ng menu", {
    reply_markup: { remove_keyboard: true },
  });
});

// 3. Inline Keyboard (n√∫t b√™n d∆∞·ªõi tin nh·∫Øn)
bot.command("viewlogwork", async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .row()
    .text("Ng√†y h√¥m qua", "yesterday_report")
    .row()
    .text("Tu·∫ßn hi·ªán t·∫°i", "current_week_report")
    .row()
    .text("Th√°ng hi·ªán t·∫°i", "current_month_report")
    .row()
    .text("Nh·∫≠p ng√†y c·ª• th·ªÉ", "specific_date");

  await ctx.reply("Ch·ªçn th·ªùi gian mu·ªën xem Logwork?", {
    reply_markup: inlineKeyboard,
  });
});

// X·ª≠ l√Ω callback khi ng∆∞·ªùi d√πng nh·∫•n n√∫t inline
bot.callbackQuery("yesterday_report", async (ctx) => {
  await ctx.answerCallbackQuery({
    text: "ƒê√£ x√°c nh·∫≠n ch·ªçn ng√†y h√¥m qua!",
  });
  await ctx.reply("B√°o c√°o ng√†y h√¥m qua!");
});

bot.callbackQuery("current_week_report", async (ctx) => {
  await ctx.answerCallbackQuery({
    text: "ƒê√£ x√°c nh·∫≠n ch·ªçn tu·∫ßn hi·ªán t·∫°i!",
  });
  await ctx.reply("B√°o c√°o tu·∫ßn hi·ªán t·∫°i!");
});

bot.callbackQuery("current_month_report", async (ctx) => {
  await ctx.answerCallbackQuery({
    text: "ƒê√£ x√°c nh·∫≠n ch·ªçn th√°ng hi·ªán t·∫°i!",
  });
  await ctx.reply("B√°o c√°o th√°ng hi·ªán t·∫°i!");
});

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Nh·∫≠p ng√†y c·ª• th·ªÉ"
bot.callbackQuery("specific_date", async (ctx) => {
  ctx.session.waitingForDate = true;
  await ctx.answerCallbackQuery();
  await ctx.reply(
    "Vui l√≤ng nh·∫≠p ng√†y theo ƒë·ªãnh d·∫°ng YYYY-MM-DD\nV√≠ d·ª•: 2025-01-06"
  );
});

// X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n khi ƒëang ch·ªù nh·∫≠p ng√†y
bot.on("message:text", async (ctx) => {
  if (ctx.session.waitingForDate) {
    const dateStr = ctx.message.text;
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;

    if (dateRegex.test(dateStr)) {
      const date = new Date(dateStr);

      // Ki·ªÉm tra ng√†y h·ª£p l·ªá
      if (!isNaN(date.getTime())) {
        ctx.session.waitingForDate = false;
        // X·ª≠ l√Ω logic xem logwork cho ng√†y c·ª• th·ªÉ
        await ctx.reply(`ƒêang xem logwork cho ng√†y ${dateStr}`);
        // TODO: Th√™m logic x·ª≠ l√Ω logwork ·ªü ƒë√¢y
      } else {
        await ctx.reply(
          "Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i theo ƒë·ªãnh d·∫°ng YYYY-MM-DD"
        );
      }
    } else {
      await ctx.reply(
        "ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng YYYY-MM-DD"
      );
    }
  }
});

// X·ª≠ l√Ω tin nh·∫Øn khi ng∆∞·ªùi d√πng nh·∫•n n√∫t
// bot.on("message:text", async (ctx) => {
//   const text = ctx.message.text;
//   const user = ctx.message.from;

//   // Ki·ªÉm tra v√† l·∫•y username ho·∫∑c t√™n ƒë·∫ßy ƒë·ªß
//   if (!user) {
//     await ctx.reply("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng.");
//     return;
//   }

//   // console.log("messageCounts::", messageCounts);
//   // if (!messageCounts[user.id]) {
//   //   messageCounts[user.id] = { count: 1, lastMessage: now };
//   // } else {
//   //   const { count, lastMessage } = messageCounts[user.id];
//   //   console.log("Now - lastMessage::", now - lastMessage);
//   //   console.log("count::", count);
//   //   // Ki·ªÉm tra n·∫øu tin nh·∫Øn g·ª≠i qu√° nhanh (v√≠ d·ª•: c√°ch nhau d∆∞·ªõi 5 gi√¢y)
//   //   if (now - lastMessage < 2000) {
//   //     messageCounts[user.id].count += 1;
//   //   } else {
//   //     // Reset l·∫°i n·∫øu v∆∞·ª£t qu√° 2 gi√¢y
//   //     messageCounts[user.id] = { count: 1, lastMessage: now };
//   //     if (count > 2) {
//   //       return ctx.reply(
//   //         "B·∫°n ƒëang g·ª≠i qu√° nhi·ªÅu tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau."
//   //       );
//   //     }
//   //   }
//   // }

//   const username = user.username ?? "demo";
//   const userKey = username as keyof typeof User;

//   if (!User[userKey]) {
//     await ctx.reply(`Kh√¥ng t√¨m th·∫•y th√¥ng tin cho ng∆∞·ªùi d√πng: ${username}`);
//     return;
//   }

//   // Ki·ªÉm tra v√† l∆∞u v√†o Redis tr∆∞·ªõc
//   const existsInRedis = await checkAndSaveToRedis(user.id, username);

//   // N·∫øu ch∆∞a t·ªìn t·∫°i trong Redis, l∆∞u v√†o Turso
//   if (!existsInRedis) {
//     await saveToTurso(user.id, username);
//   }

//   const timestamp = ctx.message.date; // Unix timestamp (gi√¢y)

//   // Chuy·ªÉn Unix timestamp sang ƒë·ªëi t∆∞·ª£ng Date
//   const messageDate = new Date(timestamp * 1000); // Nh√¢n v·ªõi 1000 ƒë·ªÉ chuy·ªÉn sang ms

//   const userJira = text.split(" ")[1] || User[userKey];

//   if (text === "/test") {
//     await ctx.reply("ƒê√¢y l√† tin nh·∫Øn t·ª´ bot demo!");
//     return;
//   }

//   // ƒê·ªãnh d·∫°ng ng√†y theo ki·ªÉu YYYY-MM-DD
//   const formattedDate =
//     validateDateFormat(text) || messageDate.toISOString().split("T")[0]; // L·∫•y ph·∫ßn ng√†y tr∆∞·ªõc 'T'
//   const data = await exportWorklogsToSheet(userJira, 0, formattedDate);
//   if (!data) {
//     await ctx.reply("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ b√°o c√°o.");
//     return;
//   }
//   const result = generateTelegramMessage(data ?? [], formattedDate);
//   if (text === "Ch√†o b·∫°n üëã") {
//     await ctx.reply(`Xin ch√†o ${User[userKey]} ! üòä`);
//     await ctx.reply(result);
//   } else if (text === "B√°o c√°o üìÑ") {
//     await ctx.reply(result);
//   } else if (text === "Tho√°t ‚ùå") {
//     await ctx.reply("H·∫πn g·∫∑p l·∫°i b·∫°n!");
//     await ctx.reply(result);
//   } else {
//     await ctx.reply("B·∫°n v·ª´a g·ª≠i: " + text);
//     await ctx.reply(result);
//   }
// });

export const POST = webhookCallback(bot, "std/http");
